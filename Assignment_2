				        EC-351:INTRODUCTION TO ALGORITHMS
							ASSIGNMENT-2	


SUBMITTED BY:  Neha Mahindrakar						Roll No: 18BEC032



Consider the following computational problems. Find out the Time complexity of all the problems. Write your comments and observations for each problem.




1)Find the sum of two numbers A and B.

		ALGORITHM:
		
		STEP 1: 	START
		STEP 2:	 Input First number
		STEP 3:	 Input Second number
		STEP 4: 	Add
		STEP 5: 	Display sum
		STEP 6: 	STOP

		Time Complexity-O(1)


		
		The algorithm involves basic adding of two numbers and printing the output.There is no loop 
		which would require more time in  repetition of code.Hence this algorithm will need constant
		time i.e O(1).
		
		Therefore Time complexity=O(n)
















2)Convert temperature from Celsius(C) to Fahrenheit (F) and Fahrenheit to Celsius.



		ALGORITHM:
	
		STEP 1: 	START
		STEP 2: 	Input temperature in Celsius(C) or Fahrenheit(F)
		STEP 3: 	F = (9.0/5.0 x C) + 32
		STEP 4: 	C = 5.0/9.0 (F - 32 )
		STEP 5:	Display the result temperature
		STEP 6:	STOP




Time Complexity-O(1)



		
		This algorithm is to convert temperature from Celsius(C) to Fahrenheit(F) if input in C and from 
Fahrenheit(F) to Celsius(C) if input in F. It involves basic arithmetic operations and printing the result. 

		Therefore Time complexity is O(1).


















3)Find Area(A) and Perimeter (P) of a Square.

		
ALGORITHM:
	

		STEP 1: 	START
		STEP 2: 	Input the length(L) of the square
		STEP 3:	Compute A=L*L
		STEP 4:	Compute P=4*L
		STEP 5:	Display Area(A) and Perimeter(P)
		STEP 6: 	STOP



		Time Complexity-O(1)




		The Algorithm inputs the side of a square to find its area(A) and Perimeter(P).The program 
	involves only basic algorithmic operation that is multiplication to calculate both area and      
perimeter. Then it prints area and perimeter. It does not involve any loop or array. Hence it needs only constant time.




















4)Find the Compound Interest (CI).


ALGORITHM:
	
		STEP 1: 	START
		STEP 2: 	Input the values of P,N,R                                       P- Principal amount
		STEP 3:	Compute CI=P(1+R/100)N - P		        N- Time span
		STEP 4:	Display CI					        R-  Rate of Interest
		STEP 5: 	STOP

		Time Complexity-O(1)

		


The Algorithm is used to compute Compound Interest(CI) using principal(P), rate of interest (R)
		and time(n). It outputs Compound interest by mathematical formula which involves basic 
		operations.There is no loop involved for the computation.

		Therefore Time complexity=O(1)











		







5)Swap Two Numbers using Temporary Variable.

		ALGORITHM:
	
		STEP 1: 	START
		STEP 2: 	Input two numbers a and b
		STEP 3: 	Display the numbers
		STEP 4:	Temp=a
		STEP 5:	a=b
		STEP 6: 	b=Temp
		STEP 7:	 Display the numbers.
		STEP 8: 	STOP

		Time Complexity-O(1)

		


The algorithm swaps two values using a third(temporary) variable.It stores the first value in the 
		the temporary variable. Then the second value is stored in  the first, and it gets replaced with
		the value of the temporary variable. And hence the two variables get swapped. There is no 
		difficult computation nor any loop involved. So, it requires constant time.

		Time complexity=O(1)+O(1)+O(1)= 3O(1) = O(1)

		Therefore Time complexity=O(1)


			














6)Find the Smallest of two numbers A and B.
 
		
		ALGORITHM:
	
		STEP 1: 	START
		STEP 2: 	Input two numbers A and B
		STEP 3: 	If A<B
					Display A
			   	Else 
					Display B
		STEP 4: 	STOP



		Time Complexity-O(1)
	
		The algorithm involves an ‘if-else’ condition statement which will output A if it is less than B. Else
it  outputs B.It doesn't require more than a constant time to output the smallest of given two   numbers.

Time complexity=O(1)  or  O(1) 

(The program will display either the ‘if’ part or the ‘else’ part where both will require O(1) time because of a simple ‘print’ statement)

Therefore Time complexity=O(1).

















7)Find the largest of three numbers A, B and C.
 
		
		ALGORITHM:
	
		STEP 1: 	START
		STEP 2: 	Input three values A,B and C
		STEP 3:	 If A>B
					Goto STEP 5
		STEP 4: 	If B>C
					Display B
			  	 Else
					Display C
			  	Go to STEP 6
		STEP 5:	 If A>C
					Display A
			   	Else
					Display C
		STEP 6: 	STOP


		Time Complexity-O(1)

This algorithm involves comparing three values and prints the largest among them. It compares the first variable with the second and if true compares with the third one too. If it satisfies all the conditions, the output is the first variable. If the first condition is not true, the algorithm takes the second variable and compares it with the third one. If it is larger than the third variable, the algorithm outputs it ,else it will output the third variable. If the first variable is smaller than the third one, the algorithm prints the third variable as the maximum of all the three element. All the comparisons take constant time i.e O(1).

Hence O(1)+O(1)+O(1)+.... till one value is printed.
Hence Time complexity=O(n).









	
8)Find Even numbers between 1 to 50.


		ALGORITHM:
	
		STEP 1: 	START
		STEP 2: 	Initialize i=1
		STEP 3:	 If  i>50
					Goto STEP 7
		STEP 4:	 IF (i%2==0)
					Display i
		STEP 5: 	i=i+1
		STEP 6: 	Goto STEP 3
		STEP 7: 	STOP

		Time Complexity-O(1)


		This algorithm prints the even numbers from 1 to 50. If it is divisible by 2, it's a even number 
		else the loop variable is incremented and checked again.As the program involves no loop, 
there is only checking of a condition upto a constant limit. 

Therefore, Time complexity=O(1)+O(1)+O(1)+O(1)+O(1)+O(1)+.......... upto 50.

 Hence the time complexity becomes O(1).





















9) Find Sum of Series 1+2+3+......+N.


ALGORITHM:

	
		STEP 1: 	START
		STEP 2:	Input the value of N
		STEP 3:	Initialize i=1,sum=0
		STEP 4: 	If i>N
					Goto STEP 8
		STEP 5: 	sum=sum+i
		STEP 6: 	i=i+1
		STEP 7: 	Goto STEP 4
		STEP 8: 	Display sum
		STEP 9: 	STOP

		
Time Complexity-O(N)



		The Algorithm prints the sum of integers which involves looping of the function starting from
		i=1 up to i=N. Though the sum and the increment variable is replaced every time , the program
		has to keep record of its previous value adding more time to fetch and function. Hence time 
		taken by the algorithm increases and so time complexity reaches O(n). 



	

		
		


 


  

